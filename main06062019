/*
 * GccApplication1.c
 *
 * Created: 20/05/2019 08:19:50
 * Author : Etudiant
 */ 
#define F_CPU 8000000UL
#include <avr/io.h>
#include <util/delay.h>
#include <stdio.h>
#include <avr/iom32.h>
#include <avr/interrupt.h>


//_______________________________________DEBUT PROTOTYPES_______________________________________________________________________________________//

//Proto Option 1

//Fonctions élémentaires Option 1
unsigned char Lecture_Vitesse (void);
unsigned char Ecriture_vitesse(unsigned char  vitesse);
void  Affichage_vitesse(unsigned char  vitesse_pourcent);

//Fonctions élémentaires Option 2
void decompte(void);
void chrono (void);
void InitTimerInterrupt(void);

//Fonctions élémentaires Option 3
unsigned char lecture_capteur_fourche(void);
void ecriture_nb_tour(void);

//Fonction élémentaire Option 4
void affiche_temps_X(void);

//Fonction élémentaire Option 5
void meilleur_temps(void);

unsigned char nouveau_nb_tour(void);
unsigned char Appuibp5();
unsigned char Appuibp6();
void Penalite (void);

//Fonctions secondaires reprises du cours et modifiées/créees/améliorées
void InitUSART(void);
char putCharToLCD(char codeASCII);
void InitLCD(void);
int sendOneChar( char codeASCII, FILE *unused);
void AffPrecis(unsigned char colonne, unsigned char ligne);
FILE lcd_connexion = FDEV_SETUP_STREAM(sendOneChar, NULL, _FDEV_SETUP_WRITE);

volatile unsigned int	centi=0;
volatile unsigned char	seconde=0 ;
volatile unsigned char	minute=0 ;

volatile unsigned char	t_minute=0 ;
volatile unsigned char	t_centi=0 ;
volatile unsigned char	t_secondes=0 ;

#define tourmax 11
volatile unsigned char nb_tour=0;
//volatile unsigned char tourmax = 11;

volatile unsigned char decompteencours = 0;
volatile unsigned char autorisation_capteur = 1;
volatile unsigned char autorisationfourche = 1;

int main(void)
{
	cli();
	
	stdout = &lcd_connexion;
	InitUSART();
	InitLCD();
	InitTimerInterrupt();
	//Déclaration des ports 
	//En output : PD2 à PD7 , PC0, PC2 à PC5 et PB7
	//En input : PA0 à PA7, PC1,6,7, PB0 à PB6, PD0,1
	DDRA=0x00; PORTA=0x00;
	DDRB=0x80; PORTB=0x00;
	DDRC=0x3C; PORTC=0x00;
	DDRD=0xFC; PORTD=(1<<PD6);
	
	//Pour le moteur
	TCNT2=0x00;
	TCCR2=0x6A;
	
	//Déclaration des variables
	unsigned char vitesse;
    unsigned char pourcent;
	unsigned char depart_lance = 1;
	printf("%c%c",0xA3,0x01);					//Clear de l'écran et remise à zéro du curseur
	
	sei();
	
	
	//_______________________________________DEBUT MAIN_______________________________________________________________________________________//
    while (1) 
    {	
		if((PINB & 1<<PB2 ))		//Si l'on n'a pas encore fait de départ lancé et qu'on appuie sur Menu
		{
			if(depart_lance){
			depart_lance--;
			decompteencours=1;				//Lancement du decompte
			centi=0;
			seconde=0;
			minute=0;
			InitLCD();
			}
									
		}
		while (decompteencours)
		{
			decompte();
			vitesse = Lecture_Vitesse();
			pourcent = Ecriture_vitesse(vitesse);
			
		}
		
		if (lecture_capteur_fourche()) ecriture_nb_tour();
		vitesse = Lecture_Vitesse(); 
		pourcent = Ecriture_vitesse(vitesse);
		Affichage_vitesse(pourcent);
		chrono();
		
		
		
		
		//affiche_temps_X();
		meilleur_temps();
    }
}



//_______________________________________DEBUT FONCTIONS_______________________________________________________________________________________//


//Fonctions secondaires

void InitUSART(void)
{
	UBRRH = 0x00; UBRRL = 25;		// vitesse de transmission 19200 bits/sec
	UCSRB = 1 << TXEN;              // clear du flag
	UCSRC = 0x86;					// configurer la lecture avec charactères 8 bits, 1 bit de stop, pas de parité
}

char putCharToLCD(char codeASCII)
{
	 while (!(UCSRA &(1<<UDRE)));	// attendre fin de la conversion 
	 UDR=codeASCII;					// déposerle caractère dansl’USART
	 return(codeASCII);				// retourner le caractère envoyé
}

void InitLCD(void)
{
	putCharToLCD(0xA3);
	putCharToLCD(0x01);				//Reset écran et position
	putCharToLCD(0xA3);				
	putCharToLCD(0x0C);				//Désactivation du curseur
	_delay_ms(20);
}

int sendOneChar( char codeASCII, FILE *unused)
{
	return putCharToLCD(codeASCII);				//envoi d’un caractère au LCD
}

void AffPrecis(unsigned char colonne, unsigned char ligne)
{
	printf("%c%c%c",0xA1,colonne,ligne); //Positionnement du curseur selon la ligne et colonne souhaitées
	//_delay_ms(50);
}


//Fonctions élémentaires

unsigned char Lecture_Vitesse (void)
{
	//Potentiometre en PA0, convertir analogique en numérique

	//Config
	ADMUX=0b01100000;					//ADLAR à 1 et tension de ref à 5V et ADC0 en entrée
	ADCSRA|=(1<<ADPS2)|(1<<ADEN);		//Prédiviseur à 16 pour 500Khz de freq de conversion, la plus rapide possible, Alimentation activée
	
	//Lancement de la conversion
	ADCSRA |= (1<<ADSC);				//Activation de la conversion
	while(!(ADCSRA & (1<<ADIF)));		//Tant que le flag de fin de conversion n'est pas activé, ne rien faire
	ADCSRA|=(1<<ADIF);					//Clean du flag en lui appliquant un 1
	return ADCH;						//Retour du résultat avec les 8 bits MSB
}

unsigned char Ecriture_vitesse(unsigned char  vitesse)
{
	
	//Utilisation du mode Fast PWM qui compte jusqu'à la valeur vitesse, définie sur 255
	TCNT2=0x00;
	OCR2= vitesse;
	//TIFR=(1<<OCF2);
	//while((TIFR & (1<<OCF2))==0);
	unsigned char vite= 100-(vitesse/2.55);
	return (vite);	
}

void  Affichage_vitesse(unsigned char  vitesse_pourcent)
{
	//Opérations
	//unsigned char V = 0;								//Valeur comprise entre 0 et 5 donc usage d'un uchar suffisant
	//unsigned int mV = 0;								//Usage de int car la valeur peut dépasser 255 (0-999)
	//V=(vitesse_pourcent/100*5);						//On prend la valeur en V de la vitesse, si 100%, alors tension = 5V, si 50%, tension=2V
	//mV = ((vitesse_pourcent/100*5)%1)*100;			//Ici on s'occupe des mV, on prend le reste de la division par 1 de notre tension, si tension de base = 2.5V, on a un reste de 0.5, que l'on multiplie par 100 pour correspondre aux mV.
	
	//Affichage
	AffPrecis(0,0);
	//printf("%c%c",0xA3,0x01);								//Clear de l'écran
	//printf("%c %c V %i mV  %c",0xA2,V,mV,0x00);			//Utile lors des phases de test
	printf("%cVitesse :%d%%     %c",0xA2,vitesse_pourcent,0x00);	//Affichage de la vitesse
	_delay_ms(100);
}

void decompte(void)
{
	
	
		
			if (seconde==0)
			{
				nb_tour=0;
				AffPrecis(5,1);						//Affichage au centre de la deuxieme ligne
				printf("%c %d...%c",0xA2,3,0x00);	//3... 2... 1...	
			}
		
			if (seconde==1)
			{
				//InitLCD();
				AffPrecis(5,1);						//Affichage au centre de la deuxieme ligne
				printf("%c %d...%c",0xA2,2,0x00);	//3... 2... 1...
			}
		
			if (seconde==2)
			{
				//InitLCD();
				AffPrecis(5,1);						//Affichage au centre de la deuxieme ligne
				printf("%c %d...%c",0xA2,1,0x00);	//3... 2... 1...
			}
		
			if (seconde==3)
			{
				//InitLCD();
				AffPrecis(5,1);						//Affichage au centre de la deuxieme ligne
				printf("%c GO!%c",0xA2,0x00);	//3... 2... 1...
			}
		
			if ((seconde==4))
			{
				InitLCD();
				decompteencours=0;
				centi=0;
				
			}
		
	

		
	

		
		
}



void InitTimerInterrupt(void)
{
	TCNT0=0x00;									//Reset de la valeur par précaution.
	TCCR0= (1<<CS02) | (1<<CS00) | (1<<WGM01);	//Prédiviseur à 1024 avec CTC
	OCR0 = 77;									//Nombre d'actions pour effectuer (OCR2+1)*(Tcpu*n)=0.010, donc on a OCR2=77 qui donne 0.009984s (résultat le plus proche de 0.01s, sans compter les temps de cycle pour effectuer les opérations précédentes)
	TIMSK = (1<<OCIE0);							//Autorise les interruptions
}


ISR (TIMER0_COMP_vect)
{
		
		centi++;								//Toutes les 0.01s, centi s'incrémente
		
		if (centi==100)							//Si 100*centi, alors on incrémente le compteur de secondes et reset centi
		{
			centi=0;
			seconde++;
		}
		
		if (seconde==60)						//Même procédé avec les secondes qui incrémentent les minutes
		{
			seconde=0;
			minute++;
		}
		
												//Gestion au tour
		t_centi++;								//Toutes les 0.01s, centi s'incrémente
		
		if (t_centi==100)							//Si 100*centi, alors on incrémente le compteur de secondes et reset centi
		{
			t_centi=0;
			t_secondes++;
		}
		
		if (t_secondes==60)						//Même procédé avec les secondes qui incrémentent les minutes
		{
			t_secondes=0;
			t_minute++;
		}
		
	Penalite();
	
	//Tri de dingue
	
		
		
		
}

void chrono(void)
{
	AffPrecis(0,1);								//Affichage sur la deuxième ligne à la 1ere colonne
	if (seconde<10) printf("%c%d'0%d''%d%c",0xA2,minute,seconde,centi,0x00);
	else printf("%c%d'%d''%d%c",0xA2,minute,seconde,centi,0x00);
}

unsigned char lecture_capteur_fourche(void)
{
	if (PINB & (1<<PB4))
	{
		return 1;
	}
	else return 0;
}

void ecriture_nb_tour(void)
{
	
nb_tour++;
	
	printf("%c%c%c%cTour%d  %c",0xA1,0x09,0x01,0xA2,nb_tour,0x00);
	
}

void affiche_temps_X(void)
{
	
	if (nb_tour==tourmax)
	{
		PORTD&=~(0xC0);
		InitLCD();
		unsigned char minutes=minute;
		unsigned char secondes=seconde;
		unsigned char centis=centi;
		AffPrecis(0,1);
		printf("%cTemps : %d'%d''%d%c",0xA2,minutes,secondes,centis,0x00);
		while(1);
	}

	
}

void meilleur_temps(void)
{
	static unsigned char tour = tourmax;
	static unsigned char tour_centi[255];
	static unsigned char tour_seconde[255];
	static unsigned char tour_minute[255];
	static unsigned char meill_tour = 1;
	
	if (lecture_capteur_fourche() && (decompteencours ==0) && (nb_tour>=1))
	{
		tour_centi[nb_tour]=t_centi;
		tour_seconde[nb_tour]=t_secondes;
		tour_minute[nb_tour]=t_minute;
		
		t_centi=0;
		t_secondes=0;
		t_minute=0;
	}
	
	if (nb_tour==tourmax)
	{
		decompteencours=0;
		for (int i=2; i<tourmax ; i++)
		{
			/*if (tour_minute[i]<tour_minute[meill_tour])
			{
				meill_tour=i;
			}
			else */if((tour_minute[i]==tour_minute[meill_tour]) && (tour_seconde[i]<tour_seconde[meill_tour]))
			{
				meill_tour=i;
			}
			else if ((tour_minute[i]==tour_minute[meill_tour]) && (tour_seconde[i]==tour_seconde[meill_tour]) && (tour_centi[i]<tour_centi[meill_tour]))
			{
				meill_tour=i;
			}
			
			
		}
		InitLCD();
		PORTD&=~(1<<PD6);
		AffPrecis(0,0);
		printf("%cTour%d : %d:%d:%d%c",0xA2,meill_tour,tour_minute[meill_tour],tour_seconde[meill_tour],tour_centi[meill_tour],0x00);
		unsigned char secoonde = seconde;
		unsigned char centii = centi;
		unsigned char minuute = minute;
		AffPrecis(0,1);
		printf("%cTemps: %d:%d:%d%c",0xA2,minuute,secoonde,centii,0x00);
	
				static unsigned char rang =1;
				if(Appuibp5()) rang--;
				if (Appuibp6()) rang++;
				
				if (rang>tourmax)
				{
					rang=1;
					InitLCD();
					AffPrecis(0,0);
					printf("%c T%d : %d:%d:%d%c",0xA2, rang, tour_minute[rang],tour_seconde[rang],tour_centi[rang],0x00);
				}
				if (rang<1)
				{
					rang=tourmax;
					InitLCD();
					AffPrecis(0,0);
					printf("%c T%d : %d:%d:%d%c",0xA2, rang, tour_minute[rang],tour_seconde[rang],tour_centi[rang],0x00);
				}
				
			
		
		
		}
	
	
	
	
	
	
	
}


unsigned char nouveau_nb_tour(void)
{
	printf("%c%c%c%cTour%d  %c",0xA1,0x09,0x01,0xA2,nb_tour,0x00);
	
	if(lecture_capteur_fourche() & autorisationfourche)
	{
		nb_tour++;
		return 1;
	}
	else return 0;
	
	
}

unsigned char Appuibp6 (void)
{
	if((PINB & 1<<PB6)!=0){
		while((PINB & 1<<PB6)==0);
		return 1;
	}
	else return 0;
}

unsigned char Appuibp5 (void)
{
	if((PINB & 1<<PB5)!=0){
		while((PINB & 1<<PB5)==0);
		return 1;
	}
	else return 0;
}

void Penalite (void)
{
	if (decompteencours && lecture_capteur_fourche())
	{
		nb_tour++;
		PORTD&=~(0xC0);
		InitLCD();
		AffPrecis(0,0);
		printf("%cPENALITE%c",0xA2,0x00);
		_delay_ms(2000);
		PORTD|=(0xC0);
		InitLCD();	
		
	}
}
